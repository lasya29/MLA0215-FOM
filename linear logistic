import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.metrics import mean_squared_error, accuracy_score
import matplotlib.pyplot as plt

# Sample data
# Features (X): 2D input
# Target for Linear Regression (y_linear): Continuous values
# Target for Logistic Regression (y_logistic): Binary values
X = np.array([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7]])
y_linear = np.array([2, 4, 6, 8, 10, 12, 14])  # Continuous target for Linear Regression
y_logistic = np.array([0, 0, 0, 1, 1, 1, 1])   # Binary target for Logistic Regression

# Split the data into training and testing sets for both Linear and Logistic Regression
X_train, X_test, y_train_linear, y_test_linear = train_test_split(X, y_linear, test_size=0.3, random_state=42)
X_train_log, X_test_log, y_train_log, y_test_log = train_test_split(X, y_logistic, test_size=0.3, random_state=42)

# 1. Linear Regression Model
linear_model = LinearRegression()
linear_model.fit(X_train, y_train_linear)
y_pred_linear = linear_model.predict(X_test)

# 2. Logistic Regression Model
logistic_model = LogisticRegression()
logistic_model.fit(X_train_log, y_train_log)
y_pred_logistic = logistic_model.predict(X_test_log)

# Performance Evaluation
# For Linear Regression
mse = mean_squared_error(y_test_linear, y_pred_linear)
print(f"Linear Regression Mean Squared Error (MSE): {mse}")

# For Logistic Regression
accuracy = accuracy_score(y_test_log, y_pred_logistic)
print(f"Logistic Regression Accuracy: {accuracy * 100}%")

# Plotting Linear Regression Result
plt.scatter(X_test, y_test_linear, color='blue', label="Actual Values")
plt.plot(X_test, y_pred_linear, color='red', label="Predicted Values")
plt.title("Linear Regression")
plt.xlabel("X (Features)")
plt.ylabel("y (Target)")
plt.legend()
plt.show()
