# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Generate some synthetic data for polynomial regression
# Let's simulate a dataset with a quadratic relationship
np.random.seed(0)
X = 2 - 3 * np.random.normal(0, 1, 100)
y = X - 2 * (X ** 2) + np.random.normal(-3, 3, 100)

# Reshaping X for fitting the model
X = X[:, np.newaxis]

# 1. Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 2. Create a Polynomial Features object to transform the features into polynomial form
degree = 2  # You can change this to a higher degree for a more complex model
poly_features = PolynomialFeatures(degree=degree)
X_train_poly = poly_features.fit_transform(X_train)
X_test_poly = poly_features.transform(X_test)

# 3. Fit the Polynomial Regression model using Linear Regression
model = LinearRegression()
model.fit(X_train_poly, y_train)

# 4. Make predictions
y_train_pred = model.predict(X_train_poly)
y_test_pred = model.predict(X_test_poly)

# 5. Evaluate the model's performance
train_mse = mean_squared_error(y_train, y_train_pred)
test_mse = mean_squared_error(y_test, y_test_pred)
train_r2 = r2_score(y_train, y_train_pred)
test_r2 = r2_score(y_test, y_test_pred)

print(f"Training Mean Squared Error: {train_mse:.2f}")
print(f"Test Mean Squared Error: {test_mse:.2f}")
print(f"Training R-squared: {train_r2:.2f}")
print(f"Test R-squared: {test_r2:.2f}")

# 6. Visualizing the Polynomial Regression results
plt.scatter(X, y, color='blue', label='Original Data')
plt.scatter(X_test, y_test_pred, color='red', label='Predicted Data')
plt.plot(sorted(X_test), sorted(y_test_pred), color='green', label=f'Polynomial Degree {degree}')
plt.title(f'Polynomial Regression (Degree {degree})')
plt.xlabel('X')
plt.ylabel('y')
plt.legend()
plt.show()
